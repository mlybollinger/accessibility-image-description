import streamlit as st
import csv
import requests
from PIL import Image
import streamlit.components.v1 as components
import time


# read first ten rows of CSV file with image and alt-text
st.set_page_config(layout="wide")

if 'page' not in st.session_state:
    st.session_state.page = 0

if 'reset' not in st.session_state:
    st.session_state.reset = 0


for i in range(10):
    if "checkbox_" + str(i) not in st.session_state:
        st.session_state["checkbox_" + str(i)] = 0


if st.session_state.reset:
    time.sleep(5)
    st.session_state.reset = 0

js = '''
<script>
    var body = window.parent.document.querySelector(".main");
    console.log(body);
    body.scrollTo({top: 0, behavior: 'smooth'});
</script>
'''

placeholder = st.empty()

with placeholder.container():
    components.html(
        js,
    )



st.title("Model-Generated Alternative Text")

st.header("Approve, revise, or reject the following image descriptions generated by BLIP-2")

left, right = st.columns(2)

with open("demo.csv") as csvfile:
    csv_reader = csv.reader(csvfile)

    for i in range(1 + 10 * st.session_state.page):
        next(csv_reader)


    with left:
        
        for i in range(5):
            row = next(csv_reader)
        
            src = row[6]
            alt = row[5][1:][:-1]
            page_url = row[2]
            orig_alt = row[4]
    

            st.subheader("Image: ")

            

        

        
            im = Image.open(src).resize((240, 240))
            
            st.image(im)
            st.markdown("<p style='font-size: 14px; color: #D3D3D3'><i>" + page_url + "</i></p>", unsafe_allow_html=True)


            if not st.session_state["checkbox_" + str(i)]:
            
               st.text_input("Alternative text to revise: ", value=alt, key = "text_" + str(i))
            else:
                st.markdown('<div class="css-16idsys"><p>Alternative text to revise: </p></div>', unsafe_allow_html=True)
                st.code(alt, language="markdown")

            st.checkbox("Leave this one for later", key="checkbox_" + str(i))

    
            
            st.markdown("#")

            with st.expander("See original alt text"):
                st.write(orig_alt)
            st.markdown("#")
            st.markdown("#")

            
    with right:

        for i in range(5, 10):
            row = next(csv_reader)
        
            src = row[6]
            alt = row[5][1:][:-1]
            page_url = row[2]
            orig_alt = row[4]
    
            st.subheader("Image: ")

        

        
            im = Image.open(src).resize((240, 240))
            
            st.image(im)
            st.markdown("<p style='font-size: 14px; color: #D3D3D3'><i>" + page_url + "</i></p>", unsafe_allow_html=True)
            
            if not st.session_state["checkbox_" + str(i)]:
            
                 st.text_input("Alternative text to revise: ", value=alt, key = "text_" + str(i))
            else:
                st.markdown('<div class="css-16idsys"><p>Alternative text to revise: </p></div>', unsafe_allow_html=True)

                st.code(alt, language="markdown",)

            st.checkbox("Leave this one for later", key="checkbox_" + str(i))

            
                
            st.markdown("#")

            with st.expander("See original alt text"):
                st.write(orig_alt)
            st.markdown("#")
            st.markdown("#")


def submit_button():
    st.runtime.legacy_caching.clear_cache()
    st.session_state.page +=1
    st.session_state.reset = 1

    placeholder.empty()

submit = st.button('Submit', on_click = submit_button)





            
          

             
